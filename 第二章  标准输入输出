1.程序在读写一个文件之前，必须首先在程序与文件之间建立连接通道，称为打开文件。
2.有两种机制：文件描述字和流。
3.以'/'开头的路径名称为绝对路径，此路径名的第一个分量位于根目录。'.'表示当前目录，'..'表示当前目录的父目录。
4.FILE *fopen(const char *pathname,const char* opentype)函数打开由pathname指定的文件并创建一个与之相关连的流。
  opentype：  "r" :为读而打开一个已存在的文件，文件位置定位于文件开始。
              "w" :为写而打开一个文件。如果文件存在，文件会被重新写，不存在，则创建一个文件。
              "a" :为在文件末尾添加内容打开文件。存在，则在文件末尾添加，否则，创建一个文件。
              "r+":为更新（即读又写）打开一个文件
              "w+":为更新（即读又写）打开一个文件，如果文件存在，文件会被重新写，不存在，则创建一个文件。
              "a+":为更新（即读又写）打开一个文件，如果文件存在，原内容不变，不存在，则创建一个文件。输出总是添加在文件的末尾。
5.int fclose(FILE *stream)关闭指定的流。FILE *freopen（const char *pathname,const char *opentype,FILE *stream）重新打开指定的流。
6.字符I/O：int fgetc（FILE *stream）、int getc（FILE *stream）、int getchar（void）(从标准输出流读取)输入函数; int fputc（int c,FILE *stream）、int putc（int c,FILE *stream）、int putchar（int c）输出函数
7.行I/O： char *fgets(char *s,int count,FILE *stream)、char *gets（char *s）、getline（）、getdelim（）输入函数，gets（）函数不提供空间大小，所以可能会溢出，不安全。
          fputs（）、puts（）输出函数
8.块I/O：fread（）、fwrite（）
9.文件定位：给出文件中当前可读写字符的位置，它表示一个距文件开始多少字节数的整数。
10.文件结束和错误指示器：每个流对象内部有两个指示器：一个为错误指示器，当读写文件出错该指示器被设置;另一个为文件结束指示器，当遇到文件尾时该指示器被设置。
11.流缓冲：（1）全缓冲：只有当缓冲区满了时才传送文件
          （2）行缓冲：仅在遇到换行符时才执行真正的I/O操作
          （3）无缓冲：字符单个的读出或写入
          
   缓冲区的数据在下述情况会刷新：
   （1）当流被关闭
   （2）当调用exit（）终止程序
   （3）若流是行缓冲的，当写出一换行符时
   （4）当企图输出而缓冲区已经满了时
   （5）无论何时对流的输入操作导致它实际从文件读数据时
12.格式I/O:完成内部和外部格式之间的转换，并能对输入输出数据进行诸如数据类型、精度、位置等格式控制。
13.临时文件：允许其他用户或进程读写并且名字必须唯一。
