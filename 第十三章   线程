1.线程是一个具有自己的栈空间、局部变量以及程序计数器，与同一地址空间内其他线程共享进程资源的执行流。Linux 上gcc选项为 -lpthread
2.进程内的每一个线程都有唯一的标识，称为线程标识或TID，类型为pthread_t。所有进程一开始就有一个线程，这个线程称为初始线程。初始线程是在进程创建时就自动存在的，从main（）函数开始。线程开始函数只能带一个类型为void*的参数，并且返回值也应当是void*类型。
3.新创建的线程将继承创建它的线程的信号屏蔽、调度策略和优先级，但不继承悬挂信号集。exit（）的作用是终止整个进程的运行，从而也会终止所有仍在工作的线程。
4.同步的三种的最基本方法：互斥执行、条件同步、栅栏同步。互斥执行发生在两个线程必须依次的访问某个共享对象。条件同步发生于线程必须等待某个事件的发生。栅栏同步则用于控制线程执行过程中的汇合。提供了互斥量、读写锁、Spin锁等原语支持互斥执行，提供了条件变量和栅栏变量分别支持条件同步和栅栏同步。
5.互斥变量只有两种状态：已锁和未锁。读写锁支持线程对共享数据的共享读互斥写，主要用于保护读操作频繁但写操作很少的共享数据。读写锁分为两种方式上锁：以读方式上锁和以写方式上锁。

第二次读：
1.上下文：即程序运行需要的资源和环境，包括各类存储空间和操作系统内核的管理资源。
2.exit()终止一个线程，也会终止整个进程。
3.互斥变量是用于控制多个线程互斥执行的主要原语。
4.读写锁以读方式占有后，仍然允许其他线程以读方式占有;每次只允许一个线程获得锁来写共享数据。
5.占有锁的时间较短时使用互斥变量，时间较长并且读操作多、写操作少时使用读写锁。
6.条件变量是用来通知有关共享数据状态的一种同步机制，当线程需要等待共享数据满足某个状态（或称某个事件发生）时使用；如果状态不满足（或事件没有发生），它将在该条件变量上等待，直到将来另一个线程导致状态满足（或事件发生）并通知对应的条件变量唤醒它为止。
7.栅栏同步：一个线程运行到某一点时，需要等待其他线程都到达此点后才能继续前进。
